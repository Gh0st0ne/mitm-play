'use strict';

var _ws_client = () => {
  let windowRef;
  return {
    //ex: ws__help()
    _help() { //{data}
      // console.log(data);
    },
    //ex: ws__ping("there") 
    _ping() { //{data}
      // console.log(data);
    },
    //ex: ws__open({url: "https://google.com"})
    _open({data}) {
      const features = 'directories=0,titlebar=0,toolbar=0,location=0,status=0,menubar=0,width=800,height=600';
      windowRef = window.open(data.url, '_logs', features);
      windowRef.blur();
    },
    //ex: ws__style('.intro=>background:red;')
    _style({data}) {
      const {q,css} = data;
      document.querySelectorAll(q).forEach(
        node => (node.style.cssText = css)
      );
    },
  };
};

const _ws_wccmd = _ws_client();

var _ws_msgParser = (event, msg) => {
  if (msg.length>40) {
    console.log('>> ws-message: `%s...`', msg.slice(0,40));
  } else {
    console.log('>> ws-message: `%s`', msg);
  }
  const arr = msg.replace(/\s+$/, '').match(/^ *([\w:]+) *(\{.*)/);
  if (arr) {
    let [,cmd,json] = arr;
    try {
      if (typeof(json)==='string') {
        json = JSON.parse(json);
      }
    } catch (error) {
      console.error(json,error);
    }        
    if (window._ws_queue[cmd]) {
      const handler = window._ws_queue[cmd];
      delete window._ws_queue[cmd];
      handler(json.data);
    } else if (_ws_wccmd[cmd]) {
      console.log(json.data);
      _ws_wccmd[cmd].call(event, json);
    }       
  }    
};

var _ws_inIframe = () => {
  let ifrm;
  try {
    ifrm = window.self !== window.top;
  } catch (e) {
    ifrm = true;
  }
  return ifrm ? 'iframe' : 'window';
};

var _ws_initSocket = () => {
  const ws = new WebSocket(`ws://localhost:3000/ws?page=${_ws_inIframe()}`);

  ws.onmessage = function (event) { 
    _ws_msgParser(event, event.data);
   };

   ws.onopen = function() {                 
    ws.send(`url:${(location+'').split(/[?#]/)[0]}`);
    // console.log("ws: sent...");
  };  

  ws.onclose = function() { 
    console.log('ws: Connection is closed'); 
  };

  window._ws = ws;
  window._ws_queue = {};
};

var _ws_observer = () => {
  const {hostname: host} = location;
  let namespace, sshot = {}, nodes = {};
  for (let id in window.mitm.routes) {
    if (host.match(id)) {
      namespace = id;
      break;
    }
  }

  const route = window.mitm.routes[namespace];
  if (route && route.screenshot) {
    const {observer: ob} = route.screenshot;
    for (let id in ob) {
      let el = {};
      if (ob[id]===true) {
        el = {
          title: 'notitle',
          insert: true,
          remove: true,
        };
      } else {
        let arr = ob[id].split(':');
        arr[1].split(',').map(e => {
          el[e] = true;
        });
        el.title = arr[0];
      }
      sshot[id] = el;
      nodes[id] = {
        insert: false,
        remove: true,
      };
    }
  }

  let debunk, fname;
  const callback = function() {
    debunk && clearTimeout(debunk);
    debunk = setTimeout(() => {
      for (let id in nodes) {
        const el = document.querySelectorAll(id);
        if (el.length) {
          if (!nodes[id].insert) {
            nodes[id].insert = true;
            if (nodes[id].remove!==undefined) {
              nodes[id].remove = false;
            }
            if (sshot[id].insert) {
              fname = location.pathname.replace(/^\//,'').replace(/\//g,'-');
              fname = `${fname}-${sshot[id].title}-insert`;
              window.ws__send('screenshot', {namespace, host, fname});
            }
          }
        } else {
          if (!nodes[id].remove) {
            nodes[id].remove = true;
            nodes[id].insert = false;
            if (sshot[id].remove) {
              fname = location.pathname.replace(/^\//,'').replace(/\//g,'-');
              fname = `${fname}-${sshot[id].title}-remove`;
              window.ws__send('screenshot', {namespace, host, fname});
            }
          }
        }
      }
    }, 100);
  };

  document.addEventListener('DOMContentLoaded', () => {
    const observer = new MutationObserver(callback);
    observer.observe(document.body, {
      attributes: true,
      childList: true,
      subtree: true
    });  
  });
};

const t64 = 'Wabcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZh';

let nanoid = (size=8) => {
  let id = '';
  while (0 < size--) {
    id += t64[ Math.random()*64 | 0];
  }
  return id
};

var _ws_general = () => {
  const {_ws} = window;

  //ex: ws_broadcast('_style{"data":{"q":"*","css":"color:blue;"}}')
  //ex: ws_broadcast('_ping{"data":"Hi!"}')
  window.ws_broadcast = (json, _all=true) => {
    const msg = {data: json, _all};
    _ws.send(`broadcast${JSON.stringify(msg)}`);
  };

  //ex: ws_emitpage('_style{"data":{"q":"*","css":"color:blue;"}}')
  //ex: ws_emitpage('_ping{"data":"Hi!"}')
  window.ws_emitpage = (json, regex='') => {
    const msg = {data: json, regex};
    _ws.send(`emitpage${JSON.stringify(msg)}`);
  };

  //ex: ws__style({"q":"*","css":"color:blue;"})
  window.ws__style = (json, _all=true) => {
    const msg = {data: json, _all};
    _ws.send(`_style${JSON.stringify(msg)}`);
  };

  //ex: ws__ping('Hi!')
  window.ws__ping = (json) => {
    const msg = {data: json};
    _ws.send(`_ping${JSON.stringify(msg)}`);
  };
  
  //ex: ws__help()
  window.ws__help = () => {
    _ws.send('_help{}');
  };

  //ex: ws__open({url:'https://google.com'})
  window.ws__open = (json) => {
    const msg = {data: json};
    _ws.send(`_open${JSON.stringify(msg)}`);
  };

  window.ws__send = (cmd, data, handler) => {
   const id = nanoid();
   const key = `${cmd}:${id}`;
   window._ws_queue[key] = handler || (w => console.log(w));

   setTimeout(function() {
    if (window._ws_queue[key]) {
      delete  window._ws_queue[key];
      console.log('>> ws timeout!', key);
    } 
   }, 5000);

   _ws.send(`${key}${JSON.stringify({data})}`);
  };
};

var _ws_namespace = () => {
  const {hostname: host} = location;
  let namespace;
  for (let id in window.mitm.routes) {
    if (host.match(id)) {
      namespace = id;
      break;
    }
  }
  return namespace;
};

var _ws_cspErr = () => {
  const {hostname: host} = location;
  let namespace = _ws_namespace();

  document.addEventListener('securitypolicyviolation', (e) => {
    const fname = location.pathname
    .replace(/^\//,'')
    .replace(/\//g,'-');
    const {
      blockedURI,
      disposition,
      documentURI,
      effectiveDirective,
      isTrusted,
      lineNumber,
      originalPolicy,
      referrer,
      sourceFile,
      timeStamp,
      type,
      violatedDirective,
    } = e;
    const cspviolation = {
      blockedURI,
      disposition,
      documentURI,
      effectiveDirective,
      isTrusted,
      lineNumber,
      originalPolicy,
      referrer,
      sourceFile,
      timeStamp,
      type,
      violatedDirective,
    };
    console.log('>>> CSP ERROR', e);
    window.ws__send('csp_error', {
      namespace,
      host,
      fname,
      cspviolation,
    });
  });
};

var _ws_sshot = () => {
  const {vendor} = navigator; 
  const {hostname: host} = location;
  let namespace = _ws_namespace();
  const route = window.mitm.routes[namespace];
  if (route && route.screenshot) {
    const {selector} = route.screenshot;
    document.querySelector('html').addEventListener('click', function(e) {
      const arr = document.querySelectorAll(selector);
      const fname = location.pathname
      .replace(/^\//,'')
      .replace(/\//g,'-');
      for (let el of arr) {
        let node = e.target;
        while (el!==node && node!==document.body) {
          node = node.parentNode;
        }
        if (node!==document.body) {
          const browser = {
            '': 'firefox',
            'Google Inc.': 'chromium',
            'Apple Computer, Inc.': 'webkit',
          }[vendor];
          window.ws__send('screenshot', {namespace, host, fname, browser});
          return;
        }
      }
    });
  }
};

var _src = () => {
  _ws_initSocket();
  _ws_observer();
  _ws_general();
  _ws_cspErr();
  _ws_sshot();
};

_src();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
