'use strict';

var _ws_postmessage = () => {
  console.log('init postmessage');
  // function receiveMessage(event) {
  //   console.log(`>> Msg: ${event.origin} => https://${location.host}`);
  // }
  // window.addEventListener("message", receiveMessage, false);
};

var _ws_client = () => {
  let windowRef;
  return {
    //ex: ws__help()
    _help({data}) {
      // console.log(data);
    },
    //ex: ws__ping("there") 
    _ping({data}) {
      // console.log(data);
    },
    //ex: ws__open({url: "https://google.com"})
    _open({data}) {
      const features = 'directories=0,titlebar=0,toolbar=0,location=0,status=0,menubar=0,width=800,height=600';
      windowRef = window.open(data.url, '_logs', features);
      windowRef.blur();
    },
    //ex: ws__style('.intro=>background:red;')
    _style({data}) {
      const {q,css} = data;
      document.querySelectorAll(q).forEach(
        node => (node.style.cssText = css)
      );
    },
  };
};

const _ws_wccmd = _ws_client();

var _ws_msgParser = (event, msg) => {
  if (msg.length>40) {
    console.log('>> wsmessage: `%s...`', msg.slice(0,40));
  } else {
    console.log('>> wsmessage: `%s`', msg);
  }
  const arr = msg.replace(/\s+$/, '').match(/^ *([\w:]+) *(\{.*)/);
  if (arr) {
    let [,cmd,json] = arr;
    try {
      if (typeof(json)==='string') {
        json = JSON.parse(json);
      }
    } catch (error) {
      console.error(json,error);
    }        
    if (window._ws_queue[cmd]) {
      handler = window._ws_queue[cmd];
      delete window._ws_queue[cmd];
      handler(json.data);
    } else if (_ws_wccmd[cmd]) {
      console.log(json.data);
      _ws_wccmd[cmd].call(event, json);
    }       
  }    
};

var _ws_inIframe = () => {
  let ifrm;
  try {
    ifrm = window.self !== window.top;
  } catch (e) {
    ifrm = true;
  }
  return ifrm ? 'iframe' : 'window';
};

var _ws_initSocket = () => {
  const ws = new WebSocket(`ws://localhost:3000/ws?page=${_ws_inIframe()}`);

  ws.onmessage = function (event) { 
    _ws_msgParser(event, event.data);
   };

   ws.onopen = function() {                 
    ws.send(`url:${(location+'').split(/[?#]/)[0]}`);
    console.log("ws: sent...");
  };  

  ws.onclose = function() { 
    console.log("ws: Connection is closed"); 
  };

  window._ws = ws;
  window._ws_queue = {};
};

const t64 = 'Wabcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZh';

let nanoid = (size=8) => {
  let id = '';
  while (0 < size--) {
    id += t64[ Math.random()*64 | 0];
  }
  return id
};

var _ws_general = () => {
  const {_ws} = window;

  //ex: ws_broadcast('_style{"data":{"q":"*","css":"color:blue;"}}')
  //ex: ws_broadcast('_ping{"data":"Hi!"}')
  window.ws_broadcast = (json, _all=true) => {
    const msg = {data: json, _all};
    _ws.send(`broadcast${JSON.stringify(msg)}`);
  };

  //ex: ws_emitpage('_style{"data":{"q":"*","css":"color:blue;"}}')
  //ex: ws_emitpage('_ping{"data":"Hi!"}')
  window.ws_emitpage = (json, regex='') => {
    const msg = {data: json, regex};
    _ws.send(`emitpage${JSON.stringify(msg)}`);
  };

  //ex: ws__style({"q":"*","css":"color:blue;"})
  window.ws__style = (json, _all=true) => {
    const msg = {data: json, _all};
    _ws.send(`_style${JSON.stringify(msg)}`);
  };

  //ex: ws__ping('Hi!')
  window.ws__ping = (json) => {
    const msg = {data: json};
    _ws.send(`_ping${JSON.stringify(msg)}`);
  };
  
  //ex: ws__help()
  window.ws__help = () => {
    _ws.send(`_help{}`);
  };

  //ex: ws__open({url:'https://google.com'})
  window.ws__open = (json) => {
    const msg = {data: json};
    _ws.send(`_open${JSON.stringify(msg)}`);
  };

  window.ws__send = (cmd, data, handler) => {
   const id = nanoid();
   const key = `${cmd}:${id}`;
   window._ws_queue[key] = handler || (w => console.log(w));

   setTimeout(function() {
    if (window._ws_queue[key]) {
      delete  window._ws_queue[key];
      console.log('>> ws timeout!', key);
    } 
   }, 5000);

   _ws.send(`${key}${JSON.stringify({data})}`);
  };
};

var _ws_sshot = () => {
  const {hostname: host} = location;
  let namespace;
  for (let id in mitm.routes) {
    if (host.match(id)) {
      namespace = id;
      break;
    }
  }
  console.log('>> init screenshot');
  const route = mitm.routes[namespace];
  if (route && route.screenshot) {
    console.log('>> log screenshot');
    document.querySelector('html').addEventListener("click", function(e) {
      const arr = document.querySelectorAll(route.screenshot.selector);
      const fname = location.pathname
      .replace(/^\//,'')
      .replace(/\//g,'-');
      for (let el of arr) {
        let node = e.target;
        while (el!==node && node!==document.body) {
          node = node.parentNode;
        }
        if (node!==document.body) {
          ws__send('screenshot', {namespace, host, fname});
          return;
        }
      }
    });
  }
  // setTimeout(() => {
  //   ws__send('screenshot', {host});
  // }, 1000);
};

var _src = () => {
  _ws_postmessage();
  _ws_initSocket();
  _ws_general();
  _ws_sshot();
};

_src();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
